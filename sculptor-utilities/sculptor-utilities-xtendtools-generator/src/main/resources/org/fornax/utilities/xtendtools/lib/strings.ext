/*
 * Copyright 2010 The Xtend Tools Team and contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This extension provides several string processing functions from or inspired by StringUtils of the
 * Apache Commons Lang project.
 *
 * @author Ingo Feltes
 */ 

/**
 * Matches the string against the regex pattern and returns a list of strings representing the matched groups.
 */
List[String] parse(String str, String pattern):
  JAVA org.fornax.utilities.xtendtools.lib.StringsExtension.parse(java.lang.String, java.lang.String);

/**
 * Removes one newline from end of a String if it's there, otherwise leave it alone.
 * @see org.apache.commons.lang.StringUtils#chomp(java.lang.String)
 */
String chomp(String this):
  JAVA org.apache.commons.lang.StringUtils.chomp(java.lang.String);
  
/**
 * Removes separator from the end of str if it's there, otherwise leave it alone.
 * @see org.apache.commons.lang.StringUtils#chomp(java.lang.String,java.lang.String)
 */
String chomp(String this, String separator):
  JAVA org.apache.commons.lang.StringUtils.chomp(java.lang.String, java.lang.String);

/**
 * Remove the last character from a String.
 * @see org.apache.commons.lang.StringUtils#chop(java.lang.String)
 */
String chop(String this):
  JAVA org.apache.commons.lang.StringUtils.chop(java.lang.String);

/**
 * Repeat a String <tt>repeat</tt> times to form a new String.
 * @see org.apache.commons.lang.StringUtils#repeat(java.lang.String,java.lang.Integer)
 */
String repeat(String this, Integer repeat):
  JAVA org.fornax.utilities.xtendtools.lib.StringsExtension.repeat(java.lang.String, java.lang.Integer);

/**
 * Repeat a String <tt>repeat</tt> times to form a new String, with a String <tt>separator</tt> injected each time.
 * @see org.apache.commons.lang.StringUtils#repeat(java.lang.String,java.lang.String,java.lang.Integer)
 */
String repeat(String this, String separator, Integer repeat):
  JAVA org.fornax.utilities.xtendtools.lib.StringsExtension.repeat(java.lang.String, java.lang.String, java.lang.Integer);

/**
 * Replaces all occurrences of a String within another String.
 * @see org.apache.commons.lang.StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)
 */
String replace(String this, String searchString, String replacement):
  JAVA org.apache.commons.lang.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String);

/**
 * Splits the provided text into an array, separator string specified.
 * @see org.apache.commons.lang.StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)
 */
List[String] splitByWholeSeparatorPreserveAllTokens(String str, String separator):
  JAVA org.fornax.utilities.xtendtools.lib.StringsExtension.splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String);

/**
 * Gets a substring from the specified String avoiding exceptions.
 * @see org.apache.commons.lang.StringUtils#substring(java.lang.String,int)
 */
String substring(String str, Integer start):
  JAVA org.fornax.utilities.xtendtools.lib.StringsExtension.substring(java.lang.String, java.lang.Integer);

/**
 * Gets a substring from the specified String avoiding exceptions.
 * @see org.apache.commons.lang.StringUtils#substring(java.lang.String,int,int)
 */
String substring(String str, Integer start, Integer end):
  JAVA org.fornax.utilities.xtendtools.lib.StringsExtension.substring(java.lang.String, java.lang.Integer, java.lang.Integer);

/**
 * Gets the substring after the first occurrence of a separator.
 * @see org.apache.commons.lang.StringUtils#substringAfter(java.lang.String,java.lang.String)
 */
String substringAfter(String str, String separator):
  JAVA org.apache.commons.lang.StringUtils.substringAfter(java.lang.String, java.lang.String);

/**
 * Gets the substring after the last occurrence of a separator.
 * @see org.apache.commons.lang.StringUtils#substringAfterLast(java.lang.String,java.lang.String)
 */
String substringAfterLast(String this, String separator):
  JAVA org.apache.commons.lang.StringUtils.substringAfterLast(java.lang.String, java.lang.String);

/**
 * Gets the substring before the first occurrence of a separator.
 * @see org.apache.commons.lang.StringUtils#substringBefore(java.lang.String,java.lang.String)
 */
String substringBefore(String str, String separator):
  JAVA org.apache.commons.lang.StringUtils.substringBefore(java.lang.String, java.lang.String);

/**
 * Gets the substring before the last occurrence of a separator.
 * @see org.apache.commons.lang.StringUtils#substringBeforeLast(java.lang.String,java.lang.String)
 */
String substringBeforeLast(String str, String separator):
  JAVA org.apache.commons.lang.StringUtils.substringBeforeLast(java.lang.String, java.lang.String);

/**
 * Removes a substring only if it is at the begining of a source string, otherwise returns the source string.
 * @see org.apache.commons.lang.StringUtils#removeStart(java.lang.String,java.lang.String)
 */
String removeStart(String str, String remove):
  JAVA org.apache.commons.lang.StringUtils.removeStart(java.lang.String, java.lang.String);

/**
 * Removes a substring only if it is at the end of a source string, otherwise returns the source string.
 * @see org.apache.commons.lang.StringUtils#removeEnd(java.lang.String,java.lang.String)
 */
String removeEnd(String str, String remove):
  JAVA org.apache.commons.lang.StringUtils.removeEnd(java.lang.String, java.lang.String);

/**
 * Joins the elements of the provided Collection into a single String containing the provided elements.
 * @see org.apache.commons.lang.StringUtils#join(java.util.Collection,java.lang.String)
 */
String join(List[String] collection, String separator):
  JAVA org.apache.commons.lang.StringUtils.join(java.util.Collection, java.lang.String);

/**
 * Checks if a String is empty ("") or null.
 */
Boolean isEmpty(String this):
  this == null || length == 0;

/**
 * Checks if a String is not empty ("") and not null.
 */
Boolean isNotEmpty(String this):
  this != null && length > 0;

/**
 * Checks if a String is whitespace, empty ("") or null.
 */
Boolean isBlank(String this):
  this == null || trim().length == 0;

/**
 * Checks if a String is not empty (""), not null and not whitespace only.
 */
Boolean isNotBlank(String this):
  this != null && trim().length > 0;
